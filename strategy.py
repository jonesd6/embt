#! python3
# strategy.py

import datetime
import numpy as np
import pandas as pd
from multiprocessing import Queue

from abc import ABCMeta, abstractmethod

from event import SignalEvent

class Strategy(object):
    """
    Strategy is an abstract base class providing an interface for all
    subsequent (inheritied) strategy handling objects.
    
    The goal of a (derived) Strategy object is to generate Signal objects for
    particular symbols based on the inputs of Bars (OLHCVI) generated by a
    DataHandler object.
    
    This is designed to work both with historic and live data as the Strategy
    object is agnostic to the data source, since it obtains the bar tuples from
    a queue object.
    """
    
    __metaclass__ = ABCMeta
    
    @abstractmethod
    def calculate_signals(self):
        """
        Provides the mechanism to calculate the list of signals.
        """
        
        raise NotImplementedError("Should implement cacluate_signals()")
        
class SMAtoEMA(Strategy):
    """
    Buy an e-mini contract and hold it.
    """
    
    def __init__(self, bars, events):
        """
        Initializes the buy adn hold strategy.
        
        Parameters:
        bars - The DataHandler object that provides the bar information.
        events - The Event Queue ojbect.
        """
        
        self.bars = bars
        self.events = events
        self.relative_ema_to_sma = 0
        
    def calculate_signals(self, event, portfolio):
        """
        
        
        Parameters
        event - A MarketEvent object.
        """
        
        if event.type == 'MARKET':
            print(portfolio.es_positions)
            dataset = pd.DataFrame(self.bars.get_latest_bars(N=60))
            time_of_day = datetime.datetime(1,1,1,
                                            dataset[0][-1:].dt.hour,
                                            dataset[0][-1:].dt.minute,
                                            0)
                                            
            if time_of_day < datetime.datetime(1,1,1,9,29,0) or \
               time_of_day > datetime.datetime(1,1,1,16,29,0):
               
                dataset['SMA'] = pd.rolling_mean(dataset[4], window=30)
                dataset['EMA'] = pd.ewma(dataset[4], span=9)
                
                if dataset['EMA'].iloc[-1] < dataset['SMA'].iloc[-1] and \
                   self.relative_ema_to_sma == 0:
                   
                    self.relative_ema_to_sma = -1
                    
                elif dataset['EMA'].iloc[-1] > dataset['SMA'].iloc[-1] and \
                   self.relative_ema_to_sma == 0:
                   
                    self.relative_ema_to_sma = 1
                    
                if dataset['EMA'].iloc[-1] > dataset['SMA'].iloc[-1] and \
                   self.relative_ema_to_sma == -1 and \
                   portfolio.es_positions == 0:
                   
                    self.relative_ema_to_sma = 1
                    signal = SignalEvent('ES', dataset[0], 'LONG')
                    self.events.put(signal)
                    print("Buy to Open")
                    
                elif dataset['EMA'].iloc[-1] < dataset['SMA'].iloc[-1] and \
                   self.relative_ema_to_sma == 1 and \
                   portfolio.es_positions == 0:
                   
                    self.relative_ema_to_sma = -1
                    signal = SignalEvent('ES', dataset[0], 'SHORT')
                    self.events.put(signal)
                    print("Sell to Open")
                    
                elif dataset['EMA'].iloc[-1] > dataset['SMA'].iloc[-1] and \
                   self.relative_ema_to_sma == -1 and \
                   portfolio.es_positions < 0:
                   
                    self.relative_ema_to_sma = 1
                    signal = SignalEvent('ES', dataset[0], 'LONG')
                    self.events.put(signal)
                    print("Buy to Close")
                    
                elif dataset['EMA'].iloc[-1] < dataset['SMA'].iloc[-1] and \
                   self.relative_ema_to_sma == 1 and \
                   portfolio.es_positions > 0:
                   
                    self.relative_ema_to_sma = -1
                    signal = SignalEvent('ES', dataset[0], 'SHORT')
                    self.events.put(signal)
                    print("Sell to Close")

